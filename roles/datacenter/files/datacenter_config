#! /usr/bin/env python

import time

from ovirtsdk4 import Connection
from ovirtsdk4 import types


def main():
    args = parse_args()
    engine_api = get_api(
        url=args.url,
        user=args.username,
        password=args.password,
        insecure=True
    )
    system_service = engine_api.system_service()

    print "Creating DataCenter"
    dcs_service = system_service.data_centers_service()
    datacenter = create_datacenter(dcs_service, args.dc_name)
    if args.mac_address_range and args.mac_pool_name:
        print('Creating mac address pool')
        mac_pool = create_mac_pool(
            system_service.mac_pools_service(),
            args.mac_pool_name,
            args.mac_address_range
        )
        assign_mac_pool(dcs_service, datacenter, mac_pool)
    print("Creating Cluster")
    create_cluster(system_service.clusters_service(), datacenter, args.cluster_name, args.cpu_type)


def parse_args():
    from optparse import OptionParser
    parser = OptionParser()

    parser.add_option('--url', dest='url',
                      help='the url for the Engine api')
    parser.add_option('--username', dest='username',
                      help='the username for the Engine api')
    parser.add_option('--password', dest='password',
                      help='the password for the Engine api')
    parser.add_option('--name', dest='dc_name',
                      help='the name of the datacenter')
    parser.add_option('--cluster-name', dest='cluster_name',
                      help='the name of the cluster')
    parser.add_option('--cpu-type', dest='cpu_type',
                      help='the cpu type for the cluster')
    parser.add_option('--mac-address-range', dest='mac_address_range',
                      help='a mac address range in the form start,end')
    parser.add_option('--mac-pool-name', dest='mac_pool_name',
                      help='the name of a custom mac address pool')
    (options, args) = parser.parse_args()

    if not all(options.__dict__.values()):
        print('Not all required options were provided')
        actual = [key for (key, value) in options.__dict__.items() if value]
        print('Got: {}'.format(', '.join(actual)))
        print('Expected: {}'.format(', '.join(options.__dict__.keys())))
        exit(1)
    actual = [key for (key, value) in options.__dict__.items() if value]
    print('Got: {}'.format(', '.join(actual)))
    return options


def get_api(url=None, user=None, password=None, insecure=False, timeout=30):
    start = time.time()
    while time.time() - start < timeout:
        try:
            return Connection(
                url=url,
                username=user,
                password=password,
                insecure=insecure
            )
        except Exception as e:
            raise e
            time.sleep(10)


def get_resource(service, name):
    try:
        resource = service.list(search='name={}'.format(name))
    except TypeError:
        # Not all resource types allow the search parameter
        # In this case, will have to manually filter
        resource = list(filter(lambda x: x.name == name, service.list()))
    return resource[0] if resource else None


def create_datacenter(dcs_service, name):
    dc_types = types.DataCenter(
        name=name,
        local=False,
    )
    try:
        return (get_resource(dcs_service, name) or
                dcs_service.add(dc_types))
    except Exception as e:
        print 'Failed to create NFS Data Center:\n%s' % str(e)
        exit(1)


def create_mac_pool(pools_service, mac_pool_name, mac_address_range):
    try:
        start, end = mac_address_range.split(',')
    except Exception:
        print('Mac address range specified in an invalid format')
        exit(1)

    mac_pool_types = types.MacPool(
        name=mac_pool_name,
        ranges=[types.Range(from_=start, to=end)]
    )

    try:
        return (get_resource(pools_service, mac_pool_name) or
                pools_service.add(mac_pool_types))
    except Exception as e:
        print('Error creating mac address pool')
        print(e.detail)
        exit(1)


def assign_mac_pool(dcs_service, datacenter, pool):
    dc_service = dcs_service.data_center_service(datacenter.id)
    exception = None
    for _ in range(6):
        try:
            dc_service.update(types.DataCenter(mac_pool=pool))
            print('Successfully attached mac address pool to Datacenter')
            break
        except Exception as e:
            exception = e
            time.sleep(10)
    else:
        print('Failed to assign mac address pool to Datacenter\n{}'.format(str(e)))
        exit(1)


def create_cluster(clusters_service, datacenter, cluster_name, cpu_type):
    cpu_types = types.Cpu(type=cpu_type)
    cluster_types = types.Cluster(
        name=cluster_name,
        cpu=cpu_types,
        data_center=datacenter,
    )
    try:
        cluster = get_resource(clusters_service, name=cluster_name)
        if cluster:
            cluster_service = clusters_service.cluster_service(cluster.id)
            print 'Cluster: ' + cluster.name + ' already exists'
            print "Setting CPU type to '%s'" % cpu_type
            cluster_service.update(types.Cluster(cpu=cpu_types))
        elif clusters_service.add(cluster_types):
            print 'Cluster was created successfully'
    except Exception as e:
        print 'Failed to create Cluster:\n%s' % str(e)
        exit(1)


if __name__ == '__main__':
    main()
