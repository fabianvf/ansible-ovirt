#! /usr/bin/env python

import time
from ovirtsdk4 import Connection
from ovirtsdk4 import types


def main():
    args = parse_args()
    engine_api = get_api(
        url=args.url,
        user=args.username,
        password=args.password,
        insecure=True
    )
    system_service = engine_api.system_service()
    dcs_service = system_service.data_centers_service()
    datacenter = get_resource(dcs_service, args.datacenter)

    if not datacenter:
        print('Datacenter {} not found')
        exit(1)

    dc_service = dcs_service.data_center_service(datacenter.id)

    check_storage_domains(dc_service.storage_domains_service())
    check_hosts(system_service.hosts_service(), dc_service.clusters_service())


    print(datacenter.status.value)


def parse_args():
    from optparse import OptionParser
    parser = OptionParser()

    parser.add_option('--url', dest='url',
                      help='the url for the Engine api')
    parser.add_option('--username', dest='username',
                      help='the username for the Engine api')
    parser.add_option('--password', dest='password',
                      help='the password for the Engine api')
    parser.add_option('--datacenter', dest='datacenter',
                      help='the name of the datacenter to check')

    (options, args) = parser.parse_args()

    if not all(options.__dict__.values()):
        print('Not all required options were provided')
        actual = [key for (key, value) in options.__dict__.items() if value]
        print('Got: {}'.format(', '.join(actual)))
        print('Expected: {}'.format(', '.join(options.__dict__.keys())))
        exit(1)
    return options


def get_api(url=None, user=None, password=None, insecure=False, timeout=30):
    start = time.time()
    while time.time() - start < timeout:
        try:
            return Connection(
                url=url,
                username=user,
                password=password,
                insecure=insecure
            )
        except Exception:
            time.sleep(10)


def get_resource(service, name):
    try:
        resource = service.list(search='name={}'.format(name))
    except TypeError:
        # Not all resource types allow the search parameter
        # In this case, will have to manually filter
        resource = list(filter(lambda x: x.name == name, service.list()))
    return resource[0] if resource else None


def check_storage_domains(sds_service):
    storage_domains = sds_service.list()
    if not any([sd.status == types.StorageDomainStatus.ACTIVE for sd in storage_domains]):
        print "Couldn't find an active storage domain " \
                "for datacenter with name '%s'" % (data_center_name)
        sys.exit(1)


def check_hosts(hosts_service, clusters_service):
    clusters = clusters_service.list()
    cluster_ids = [cluster.id for cluster in clusters]

    # Host must be up, and must be SPM
    hosts = filter(lambda host: host.cluster.id in cluster_ids, hosts_service.list())
    if not any([host.status == types.HostStatus.UP and
                host.spm.status == types.SpmStatus.SPM for host in hosts]):
        print "Couldn't find an active SPM host for datacenter with name '%s'" % (data_center_name)
        sys.exit(1)


if __name__ == '__main__':
    main()
