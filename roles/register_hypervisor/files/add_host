#! /usr/bin/env python

import time
from ovirtsdk4 import Connection
from ovirtsdk4 import types


def main():
    args = parse_args()
    engine_api = get_api(
        url=args.url,
        user=args.username,
        password=args.password,
        insecure=True
    )
    system_service = engine_api.system_service()
    hosts_service = system_service.hosts_service()
    cluster = get_resource(system_service.clusters_service(), args.cluster)
    if not cluster:
        print('Cluster with name {} does not exist'.format(args.cluster))
        exit(1)

    host = add_host(hosts_service, args.host, cluster, args.host_password)
    wait_for_vdsm_host_up(hosts_service.host_service(host.id))


def parse_args():
    from optparse import OptionParser
    parser = OptionParser()

    parser.add_option('--url', dest='url',
                      help='the url for the Engine api')
    parser.add_option('--username', dest='username',
                      help='the username for the Engine api')
    parser.add_option('--password', dest='password',
                      help='the password for the Engine api')
    parser.add_option('--host', dest='host',
                      help='the address or hostname of the hypervisor host')
    parser.add_option('--host-password', dest='host_password',
                      help='the root password for the hypervisor')
    parser.add_option('--cluster', dest='cluster',
                      help='the name of the cluster to add the hypervisor to')

    (options, args) = parser.parse_args()

    if not all(options.__dict__.values()):
        print('Not all required options were provided')
        actual = [key for (key, value) in options.__dict__.items() if value]
        print('Got: {}'.format(', '.join(actual)))
        print('Expected: {}'.format(', '.join(options.__dict__.keys())))
        exit(1)
    return options


def get_api(url=None, user=None, password=None, insecure=False, timeout=30):
    start = time.time()
    while time.time() - start < timeout:
        try:
            return Connection(
                url=url,
                username=user,
                password=password,
                insecure=insecure
            )
        except Exception:
            time.sleep(10)


def get_resource(service, name):
    try:
        resource = service.list(search='name={}'.format(name))
    except TypeError:
        # Not all resource types allow the search parameter
        # In this case, will have to manually filter
        resource = list(filter(lambda x: x.name == name, service.list()))
    return resource[0] if resource else None


def add_host(hosts_service, host, cluster, password):
    host_types = types.Host(
        name=host,
        address=host,
        cluster=cluster,
        root_password=password,
        override_iptables=True
    )

    return (get_resource(hosts_service, host) or
            hosts_service.add(host_types))


def wait_for_vdsm_host_up(host_service, retries=60, delay=5):
    for i in range(retries):
        state = None
        try:
            host = host_service.get()
        except Exception as e:
            print 'Error fetching host state: {}'.format(e)
        else:
            print 'VDSM host in {state} state'.format(state=host.status.value)
            if host.status in [types.HostStatus.INSTALL_FAILED, types.HostStatus.NON_RESPONSIVE]:
                raise Exception('The VDSM host was found in a failed state. Please check engine and bootstrap installation logs.')
            elif host.status == types.HostStatus.UP:
                print 'The VDSM Host is now operational'
                return True

        if i % 30 == 0:
            print('Waiting for VDSM host to become operational...')
        time.sleep(delay)

    raise Exception('Timed out while waiting for host to start. Please check the logs.')


if __name__ == '__main__':
    main()
