#! /usr/bin/env python

import time
from ovirtsdk4 import Connection
from ovirtsdk4 import types


def main():
    args = parse_args()
    engine_api = get_api(
        url=args.url,
        user=args.username,
        password=args.password,
        insecure=True
    )
    system_service = engine_api.system_service()
    dcs_service = system_service.data_centers_service()
    datacenter = get_resource(dcs_service, args.dc_name)
    host = get_running_host(system_service.hosts_service())

    storage = {
        'storage_type': args.storage_type,
        'domain_type': args.domain_type,
        'name': args.storage_name,
        'address': args.storage_address,
        'path': args.storage_path,

    }

    print("Creating {} storage domain".format(storage['domain_type']))
    storage_domain = create_storage_domain(system_service.storage_domains_service(), storage, datacenter, host)

    try:
        attach_storage_domain(dcs_service.data_center_service(datacenter.id).storage_domains_service(), storage_domain)
    except Exception as e:
        if '409' not in ' '.join(e.args):
            raise


def parse_args():
    from optparse import OptionParser
    parser = OptionParser()

    parser.add_option('--url', dest='url',
                      help='the url for the Engine api')
    parser.add_option('--username', dest='username',
                      help='the username for the Engine api')
    parser.add_option('--password', dest='password',
                      help='the password for the Engine api')
    parser.add_option('--datacenter', dest='dc_name',
                      help='the name of the target datacenter')
    parser.add_option('--storage-name', dest='storage_name',
                      help='the name of the storage domain')
    parser.add_option('--storage-path', dest='storage_path',
                      help="the path for the storage domain's share")
    parser.add_option('--storage-address', dest='storage_address',
                      help="the address for the storage domain's share")
    parser.add_option('--storage-type', dest='storage_type',
                      help='the type of the storage (nfs, glusterfs)')
    parser.add_option('--domain-type', dest='domain_type',
                      help='the type of the domain (data, export, iso)')

    (options, args) = parser.parse_args()

    if not all(options.__dict__.values()):
        print('Not all required options were provided')
        actual = [key for (key, value) in options.__dict__.items() if value]
        print('Got: {}'.format(', '.join(actual)))
        print('Expected: {}'.format(', '.join(options.__dict__.keys())))
        exit(1)
    return options


def get_api(url=None, user=None, password=None, insecure=False, timeout=30):
    start = time.time()
    while time.time() - start < timeout:
        try:
            return Connection(
                url=url,
                username=user,
                password=password,
                insecure=insecure
            )
        except Exception:
            time.sleep(10)


def get_resource(service, name):
    try:
        resource = service.list(search='name={}'.format(name))
    except TypeError:
        # Not all resource types allow the search parameter
        # In this case, will have to manually filter
        resource = list(filter(lambda x: x.name == name, service.list()))
    return resource[0] if resource else None


def create_storage_domain(storage_service, storage, datacenter, host):
    storage_types = types.HostStorage(
        type=types.StorageType(storage['storage_type']),
        vfs_type=storage['storage_type'],
        address=storage['address'],
        path=storage['path'],
    )
    sd_types = types.StorageDomain(
        name=storage['name'],
        data_center=datacenter,
        type=types.StorageDomainType(storage['domain_type']),
        host=host,
        storage=storage_types
    )
    return (get_resource(storage_service, name=storage['name']) or
          storage_service.add(sd_types))


def attach_storage_domain(sds_service, storage_domain):
    if storage_domain.status and storage_domain.status != types.StorageDomainStatus.UNATTACHED:
        print('Storage domain exists and is attached')
    elif sds_service.add(types.StorageDomain(id=storage_domain.id)):
        print('Domain was attached successfully')


def get_running_host(hosts_service):
    # TODO: Verify cluster matches as well
    hosts = hosts_service.list(search='status=up')
    if hosts:
        return hosts[0]
    print('Failed to found a host in "up" state')
    exit(1)


if __name__ == '__main__':
    main()
